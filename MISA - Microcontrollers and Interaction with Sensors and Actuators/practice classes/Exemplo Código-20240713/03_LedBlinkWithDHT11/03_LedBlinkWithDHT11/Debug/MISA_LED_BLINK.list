
MISA_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004164  08004164  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004164  08004164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800416c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004178  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004178  0000614c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef89  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002889  00000000  00000000  00014fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00017850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c20  00000000  00000000  00018800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001828a  00000000  00000000  00019420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001315c  00000000  00000000  000316aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093857  00000000  00000000  00044806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d805d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f8  00000000  00000000  000d80a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000dc298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040a0 	.word	0x080040a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080040a0 	.word	0x080040a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ea:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_ADC1_Init+0x98>)
 80004ec:	4a21      	ldr	r2, [pc, #132]	@ (8000574 <MX_ADC1_Init+0x9c>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_ADC1_Init+0x98>)
 80004f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_ADC1_Init+0x98>)
 800051a:	4a17      	ldr	r2, [pc, #92]	@ (8000578 <MX_ADC1_Init+0xa0>)
 800051c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000526:	2201      	movs	r2, #1
 8000528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_ADC1_Init+0x98>)
 8000534:	2201      	movs	r2, #1
 8000536:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <MX_ADC1_Init+0x98>)
 800053a:	f000 fed3 	bl	80012e4 <HAL_ADC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000544:	f000 fcaa 	bl	8000e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_ADC1_Init+0xa4>)
 800054a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	@ (8000570 <MX_ADC1_Init+0x98>)
 800055a:	f001 f83f 	bl	80015dc <HAL_ADC_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000564:	f000 fc9a 	bl	8000e9c <Error_Handler>
  }

}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40012000 	.word	0x40012000
 8000578:	0f000001 	.word	0x0f000001
 800057c:	10000012 	.word	0x10000012

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <HAL_ADC_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005aa:	4a15      	ldr	r2, [pc, #84]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <HAL_ADC_MspInit+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin;
 80005da:	2303      	movs	r3, #3
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <HAL_ADC_MspInit+0x84>)
 80005ee:	f001 fb35 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	@ 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012000 	.word	0x40012000
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <MISA_ReadADC>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t MISA_ReadADC(char channelNbr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef ADCconvSTATUS;
	int32_t result;

	//Perform ADC configurations. Scan modes are faster but for introduction single conversions is quite ok!
	switch (channelNbr) {  //Configure for the channel
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <MISA_ReadADC+0x24>
 8000626:	2b01      	cmp	r3, #1
 8000628:	d003      	beq.n	8000632 <MISA_ReadADC+0x2a>
 800062a:	e005      	b.n	8000638 <MISA_ReadADC+0x30>
	case 0: sConfig.Channel = ADC_CHANNEL_0; // Sensor1
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
		break;
 8000630:	e002      	b.n	8000638 <MISA_ReadADC+0x30>
	case 1: sConfig.Channel = ADC_CHANNEL_1; // Sensor2
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
		break;
 8000636:	bf00      	nop
	}

	sConfig.Rank = 1; //Perform just one conversion
 8000638:	2301      	movs	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;  //Select the sampling time. More time -> better precision
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)  //Write the configurations
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4619      	mov	r1, r3
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <MISA_ReadADC+0x94>)
 8000648:	f000 ffc8 	bl	80015dc <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MISA_ReadADC+0x4e>
	{
		Error_Handler();
 8000652:	f000 fc23 	bl	8000e9c <Error_Handler>
	}

	HAL_ADC_Start(&hadc1); //start ADC via software
 8000656:	4811      	ldr	r0, [pc, #68]	@ (800069c <MISA_ReadADC+0x94>)
 8000658:	f000 fe88 	bl	800136c <HAL_ADC_Start>
	while(1)
	{
		ADCconvSTATUS= HAL_ADC_PollForConversion(&hadc1, 1000000);
 800065c:	4910      	ldr	r1, [pc, #64]	@ (80006a0 <MISA_ReadADC+0x98>)
 800065e:	480f      	ldr	r0, [pc, #60]	@ (800069c <MISA_ReadADC+0x94>)
 8000660:	f000 ff2a 	bl	80014b8 <HAL_ADC_PollForConversion>
 8000664:	4603      	mov	r3, r0
 8000666:	77fb      	strb	r3, [r7, #31]
		if(ADCconvSTATUS == HAL_OK) break;
 8000668:	7ffb      	ldrb	r3, [r7, #31]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <MISA_ReadADC+0x6e>
		else if(ADCconvSTATUS == HAL_ADC_STATE_TIMEOUT) break;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	2b04      	cmp	r3, #4
 8000672:	d002      	beq.n	800067a <MISA_ReadADC+0x72>
		ADCconvSTATUS= HAL_ADC_PollForConversion(&hadc1, 1000000);
 8000674:	e7f2      	b.n	800065c <MISA_ReadADC+0x54>
		if(ADCconvSTATUS == HAL_OK) break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <MISA_ReadADC+0x74>
		else if(ADCconvSTATUS == HAL_ADC_STATE_TIMEOUT) break;
 800067a:	bf00      	nop
	}

	result= (int32_t) HAL_ADC_GetValue(&hadc1);
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <MISA_ReadADC+0x94>)
 800067e:	f000 ff9f 	bl	80015c0 <HAL_ADC_GetValue>
 8000682:	4603      	mov	r3, r0
 8000684:	61bb      	str	r3, [r7, #24]
	result= result & 0xFFF; //Force the result to be lower than 4096 (12 bits). This should be always true!
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800068c:	61bb      	str	r3, [r7, #24]
	return (uint16_t)result;
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	b29b      	uxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028
 80006a0:	000f4240 	.word	0x000f4240

080006a4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
static inline void DWT_Delay_us(volatile uint32_t microseconds)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <DWT_Delay_us+0x40>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006b2:	f002 fa41 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <DWT_Delay_us+0x44>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9b      	lsrs	r3, r3, #18
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006c8:	bf00      	nop
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <DWT_Delay_us+0x40>)
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	1ad2      	subs	r2, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3f8      	bcc.n	80006ca <DWT_Delay_us+0x26>
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	e0001000 	.word	0xe0001000
 80006e8:	431bde83 	.word	0x431bde83

080006ec <Set_Pin_Output>:

#include "dht11.h"
#include "dwt_stm32_delay.h"

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000708:	887b      	ldrh	r3, [r7, #2]
 800070a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f001 fa9e 	bl	8001c5c <HAL_GPIO_Init>
}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f001 fa80 	bl	8001c5c <HAL_GPIO_Init>
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <DHT11_Start>:

void DHT11_Start (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000768:	2101      	movs	r1, #1
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <DHT11_Start+0x38>)
 800076c:	f7ff ffbe 	bl	80006ec <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	4809      	ldr	r0, [pc, #36]	@ (800079c <DHT11_Start+0x38>)
 8000776:	f001 fc0d 	bl	8001f94 <HAL_GPIO_WritePin>
	HAL_Delay(18);   // wait for 18ms
 800077a:	2012      	movs	r0, #18
 800077c:	f000 fd8e 	bl	800129c <HAL_Delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <DHT11_Start+0x38>)
 8000786:	f001 fc05 	bl	8001f94 <HAL_GPIO_WritePin>
    DWT_Delay_us (20);   // wait for 20us
 800078a:	2014      	movs	r0, #20
 800078c:	f7ff ff8a 	bl	80006a4 <DWT_Delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000790:	2101      	movs	r1, #1
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <DHT11_Start+0x38>)
 8000794:	f7ff ffc8 	bl	8000728 <Set_Pin_Input>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020400 	.word	0x40020400

080007a0 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0, timeout= 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	2300      	movs	r3, #0
 80007ac:	71bb      	strb	r3, [r7, #6]
	DWT_Delay_us (40); // 40
 80007ae:	2028      	movs	r0, #40	@ 0x28
 80007b0:	f7ff ff78 	bl	80006a4 <DWT_Delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80007b4:	2101      	movs	r1, #1
 80007b6:	4815      	ldr	r0, [pc, #84]	@ (800080c <DHT11_Check_Response+0x6c>)
 80007b8:	f001 fbd4 	bl	8001f64 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d115      	bne.n	80007ee <DHT11_Check_Response+0x4e>
	{
		DWT_Delay_us (80); // 80
 80007c2:	2050      	movs	r0, #80	@ 0x50
 80007c4:	f7ff ff6e 	bl	80006a4 <DWT_Delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80007c8:	2101      	movs	r1, #1
 80007ca:	4810      	ldr	r0, [pc, #64]	@ (800080c <DHT11_Check_Response+0x6c>)
 80007cc:	f001 fbca 	bl	8001f64 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <DHT11_Check_Response+0x3c>
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e008      	b.n	80007ee <DHT11_Check_Response+0x4e>
		else Response = -1; // 255
 80007dc:	23ff      	movs	r3, #255	@ 0xff
 80007de:	71fb      	strb	r3, [r7, #7]
	}
	while ( (timeout < DHT11_TIMEOUT) && (HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) )   // wait for the pin to go low
 80007e0:	e005      	b.n	80007ee <DHT11_Check_Response+0x4e>
	{
		timeout++;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	3301      	adds	r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
		DWT_Delay_us (10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f7ff ff5b 	bl	80006a4 <DWT_Delay_us>
	while ( (timeout < DHT11_TIMEOUT) && (HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) )   // wait for the pin to go low
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b63      	cmp	r3, #99	@ 0x63
 80007f2:	d806      	bhi.n	8000802 <DHT11_Check_Response+0x62>
 80007f4:	2101      	movs	r1, #1
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <DHT11_Check_Response+0x6c>)
 80007f8:	f001 fbb4 	bl	8001f64 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1ef      	bne.n	80007e2 <DHT11_Check_Response+0x42>
	}
	return Response;
 8000802:	79fb      	ldrb	r3, [r7, #7]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020400 	.word	0x40020400

08000810 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000816:	2300      	movs	r3, #0
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	e037      	b.n	800088c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800081c:	bf00      	nop
 800081e:	2101      	movs	r1, #1
 8000820:	481e      	ldr	r0, [pc, #120]	@ (800089c <DHT11_Read+0x8c>)
 8000822:	f001 fb9f 	bl	8001f64 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f8      	beq.n	800081e <DHT11_Read+0xe>
		DWT_Delay_us (40);   // wait for 40 us
 800082c:	2028      	movs	r0, #40	@ 0x28
 800082e:	f7ff ff39 	bl	80006a4 <DWT_Delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000832:	2101      	movs	r1, #1
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <DHT11_Read+0x8c>)
 8000836:	f001 fb95 	bl	8001f64 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10e      	bne.n	800085e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2201      	movs	r2, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	b25b      	sxtb	r3, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	b25a      	sxtb	r2, r3
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	4013      	ands	r3, r2
 8000858:	b25b      	sxtb	r3, r3
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	e00b      	b.n	8000876 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	f1c3 0307 	rsb	r3, r3, #7
 8000864:	2201      	movs	r2, #1
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	b25a      	sxtb	r2, r3
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000876:	bf00      	nop
 8000878:	2101      	movs	r1, #1
 800087a:	4808      	ldr	r0, [pc, #32]	@ (800089c <DHT11_Read+0x8c>)
 800087c:	f001 fb72 	bl	8001f64 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f8      	bne.n	8000878 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	3301      	adds	r3, #1
 800088a:	71bb      	strb	r3, [r7, #6]
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	2b07      	cmp	r3, #7
 8000890:	d9c4      	bls.n	800081c <DHT11_Read+0xc>
	}
	return i;
 8000892:	79fb      	ldrb	r3, [r7, #7]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40020400 	.word	0x40020400

080008a0 <DHT11_Get_RH_TEMP_Values>:
// Data format: 8bit integral RH data + 8bit decimal RH data + 8bit integral T data + 8bit decimal T
// data + 8bit check sum. If the data transmission is right, the check-sum should be the last 8bit of
// "8bit integral RH data + 8bit decimal RH data + 8bit integral T data + 8bit decimal T data".
//The results are multipled by 10
uint8_t DHT11_Get_RH_TEMP_Values(uint16_t *rhx10, uint16_t *tempx10)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2, DHT11_CHECK_SUM, status;
	uint16_t sum;

	DHT11_Start();
 80008aa:	f7ff ff5b 	bl	8000764 <DHT11_Start>
	status= DHT11_Check_Response();
 80008ae:	f7ff ff77 	bl	80007a0 <DHT11_Check_Response>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
	if(status)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d045      	beq.n	8000948 <DHT11_Get_RH_TEMP_Values+0xa8>
	{
		Rh_byte1 = DHT11_Read ();
 80008bc:	f7ff ffa8 	bl	8000810 <DHT11_Read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73bb      	strb	r3, [r7, #14]
		Rh_byte2 = DHT11_Read ();
 80008c4:	f7ff ffa4 	bl	8000810 <DHT11_Read>
 80008c8:	4603      	mov	r3, r0
 80008ca:	737b      	strb	r3, [r7, #13]
		Temp_byte1 = DHT11_Read ();
 80008cc:	f7ff ffa0 	bl	8000810 <DHT11_Read>
 80008d0:	4603      	mov	r3, r0
 80008d2:	733b      	strb	r3, [r7, #12]
		Temp_byte2 = DHT11_Read ();
 80008d4:	f7ff ff9c 	bl	8000810 <DHT11_Read>
 80008d8:	4603      	mov	r3, r0
 80008da:	72fb      	strb	r3, [r7, #11]
		DHT11_CHECK_SUM = DHT11_Read ();
 80008dc:	f7ff ff98 	bl	8000810 <DHT11_Read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	72bb      	strb	r3, [r7, #10]
		sum= Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	7b7b      	ldrb	r3, [r7, #13]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	7b3b      	ldrb	r3, [r7, #12]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	813b      	strh	r3, [r7, #8]
		sum= sum & 0xFF; //check only the lower byte
 8000900:	893b      	ldrh	r3, [r7, #8]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	813b      	strh	r3, [r7, #8]
		if(sum == DHT11_CHECK_SUM) //(uint_8)sum deve ser igual a DHT11_CHECK_SUM
 8000906:	7abb      	ldrb	r3, [r7, #10]
 8000908:	b29b      	uxth	r3, r3
 800090a:	893a      	ldrh	r2, [r7, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d11b      	bne.n	8000948 <DHT11_Get_RH_TEMP_Values+0xa8>
		{
			*tempx10 = Temp_byte1*10 + Temp_byte2;
 8000910:	7b3b      	ldrb	r3, [r7, #12]
 8000912:	b29b      	uxth	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4413      	add	r3, r2
 8000924:	b29a      	uxth	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	801a      	strh	r2, [r3, #0]
			*rhx10 = Rh_byte1*10 + Rh_byte2;
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	b29b      	uxth	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	4413      	add	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	b29b      	uxth	r3, r3
 800093c:	4413      	add	r3, r2
 800093e:	b29a      	uxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	801a      	strh	r2, [r3, #0]
			status= 1; //ok
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
		}
	}
	return (status); //Failed
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <DWT_Delay_Init+0x58>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <DWT_Delay_Init+0x58>)
 800095e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000962:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <DWT_Delay_Init+0x58>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <DWT_Delay_Init+0x58>)
 800096a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800096e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __asm volatile ("NOP");
 800098e:	bf00      	nop
     __asm volatile ("NOP");
 8000990:	bf00      	nop
     __asm volatile ("NOP");
 8000992:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <DWT_Delay_Init+0x5c>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800099c:	2300      	movs	r3, #0
 800099e:	e000      	b.n	80009a2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80009a0:	2301      	movs	r3, #1
  }
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000edf0 	.word	0xe000edf0
 80009b0:	e0001000 	.word	0xe0001000

080009b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a35      	ldr	r2, [pc, #212]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b33      	ldr	r3, [pc, #204]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a27      	ldr	r2, [pc, #156]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a20      	ldr	r2, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	481b      	ldr	r0, [pc, #108]	@ (8000aac <MX_GPIO_Init+0xf8>)
 8000a40:	f001 faa8 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2101      	movs	r1, #1
 8000a48:	4819      	ldr	r0, [pc, #100]	@ (8000ab0 <MX_GPIO_Init+0xfc>)
 8000a4a:	f001 faa3 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_GPIO_Init+0x100>)
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_GPIO_Init+0x104>)
 8000a64:	f001 f8fa 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480b      	ldr	r0, [pc, #44]	@ (8000aac <MX_GPIO_Init+0xf8>)
 8000a80:	f001 f8ec 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_GPIO_Init+0xfc>)
 8000a9c:	f001 f8de 	bl	8001c5c <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	@ 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	10210000 	.word	0x10210000
 8000ab8:	40020800 	.word	0x40020800

08000abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_I2C1_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000afa:	f001 fa7f 	bl	8001ffc <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 f9ca 	bl	8000e9c <Error_Handler>
  }

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000070 	.word	0x20000070
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_I2C_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b56:	23c0      	movs	r3, #192	@ 0xc0
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b66:	2304      	movs	r3, #4
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <HAL_I2C_MspInit+0x8c>)
 8000b72:	f001 f873 	bl	8001c5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <MISA_DisplayData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MISA_DisplayData(char *InfoMsg, int32_t data)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bb8:	6018      	str	r0, [r3, #0]
 8000bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bbe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000bc2:	6019      	str	r1, [r3, #0]
	char message[256], aux_message[256];

	strcpy((char *)message, InfoMsg);
 8000bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bcc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f003 fa5c 	bl	8004090 <strcpy>
	itoa(data, aux_message, 10);
 8000bd8:	f107 0108 	add.w	r1, r7, #8
 8000bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000be0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000be4:	220a      	movs	r2, #10
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	f003 f9d2 	bl	8003f90 <itoa>
	strcat(message, aux_message);
 8000bec:	f107 0208 	add.w	r2, r7, #8
 8000bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fa16 	bl	8004028 <strcat>
	strcat(message, "\n\r");
 8000bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fae9 	bl	80001d8 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <MISA_DisplayData+0x98>)
 8000c12:	8811      	ldrh	r1, [r2, #0]
 8000c14:	7892      	ldrb	r2, [r2, #2]
 8000c16:	8019      	strh	r1, [r3, #0]
 8000c18:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 8000c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fada 	bl	80001d8 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MISA_DisplayData+0x9c>)
 8000c32:	f002 fbe2 	bl	80033fa <HAL_UART_Transmit>
}
 8000c36:	bf00      	nop
 8000c38:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	080040b8 	.word	0x080040b8
 8000c44:	20000108 	.word	0x20000108

08000c48 <MISA_DisplayMsg>:

void MISA_DisplayMsg(char *InfoMsg)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0c2      	sub	sp, #264	@ 0x108
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c56:	6018      	str	r0, [r3, #0]
	char message[256];

	strcpy((char *)message, InfoMsg);
 8000c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c60:	f107 0208 	add.w	r2, r7, #8
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	4610      	mov	r0, r2
 8000c68:	f003 fa12 	bl	8004090 <strcpy>
	strcat(message, "\n\r");
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fab1 	bl	80001d8 <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <MISA_DisplayMsg+0x68>)
 8000c82:	8811      	ldrh	r1, [r2, #0]
 8000c84:	7892      	ldrb	r2, [r2, #2]
 8000c86:	8019      	strh	r1, [r3, #0]
 8000c88:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff faa2 	bl	80001d8 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f107 0108 	add.w	r1, r7, #8
 8000c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MISA_DisplayMsg+0x6c>)
 8000ca2:	f002 fbaa 	bl	80033fa <HAL_UART_Transmit>
}
 8000ca6:	bf00      	nop
 8000ca8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	080040b8 	.word	0x080040b8
 8000cb4:	20000108 	.word	0x20000108

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fa7b 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f863 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f7ff fe75 	bl	80009b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 f9d9 	bl	8001080 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cce:	f7ff fc03 	bl	80004d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cd2:	f7ff fef3 	bl	8000abc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cd6:	f000 f95f 	bl	8000f98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_MspInit(&htim2);
 8000cda:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <main+0xb4>)
 8000cdc:	f000 f9aa 	bl	8001034 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ce0:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0xb4>)
 8000ce2:	f001 ff88 	bl	8002bf6 <HAL_TIM_Base_Start_IT>

  DWT_Delay_Init();
 8000ce6:	f7ff fe35 	bl	8000954 <DWT_Delay_Init>
  lcd_clear ();
*/



  HAL_Delay(1000);
 8000cea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cee:	f000 fad5 	bl	800129c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Força o pino ao estado "1"
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Força o pino ao estado "0"
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Muda o estado do pino
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <main+0xb8>)
 8000cf6:	f001 f966 	bl	8001fc6 <HAL_GPIO_TogglePin>

	  ValorSensor1= MISA_ReadADC(0);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fc84 	bl	8000608 <MISA_ReadADC>
 8000d00:	4603      	mov	r3, r0
 8000d02:	60fb      	str	r3, [r7, #12]
	  ValorSensor2= MISA_ReadADC(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fc7f 	bl	8000608 <MISA_ReadADC>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60bb      	str	r3, [r7, #8]

	  DHT11_FLAG= DHT11_Get_RH_TEMP_Values(&ValorHumidade, &ValorTemperatura);
 8000d0e:	1cba      	adds	r2, r7, #2
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fdc3 	bl	80008a0 <DHT11_Get_RH_TEMP_Values>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(10); //Espera sem fazer nada durante 10 milisegundos
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f000 fabc 	bl	800129c <HAL_Delay>
	  if(DHT11_FLAG == 0) MISA_DisplayMsg("Problem with DHT11!! !");
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <main+0x78>
 8000d2a:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <main+0xbc>)
 8000d2c:	f7ff ff8c 	bl	8000c48 <MISA_DisplayMsg>



	  //Faz qualquer coisa com os valores e o resto do que tiver que ser feito...

	  MISA_DisplayData("Valor1= ", ValorSensor1);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4810      	ldr	r0, [pc, #64]	@ (8000d78 <main+0xc0>)
 8000d36:	f7ff ff37 	bl	8000ba8 <MISA_DisplayData>
	  MISA_DisplayData("Valor2= ", ValorSensor2);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <main+0xc4>)
 8000d40:	f7ff ff32 	bl	8000ba8 <MISA_DisplayData>
	  MISA_DisplayData("Humidade_x_10= ", ValorHumidade);
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <main+0xc8>)
 8000d4a:	f7ff ff2d 	bl	8000ba8 <MISA_DisplayData>
	  MISA_DisplayData("Temperatura_x_10= ", ValorTemperatura);
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <main+0xcc>)
 8000d54:	f7ff ff28 	bl	8000ba8 <MISA_DisplayData>


	  while( TIMER2_FLAG == 0)
 8000d58:	bf00      	nop
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <main+0xd0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0fb      	beq.n	8000d5a <main+0xa2>
	  {
		  //Do nothing! The timer2 interrupt will eventually set this variable and then the loop exits
	  }

	  //HAL_Delay(1); //Espera sem fazer nada durante 1000 milisegundos
	  TIMER2_FLAG= 0;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <main+0xd0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Muda o estado do pino
 8000d68:	e7c3      	b.n	8000cf2 <main+0x3a>
 8000d6a:	bf00      	nop
 8000d6c:	200000c8 	.word	0x200000c8
 8000d70:	40020000 	.word	0x40020000
 8000d74:	080040bc 	.word	0x080040bc
 8000d78:	080040d4 	.word	0x080040d4
 8000d7c:	080040e0 	.word	0x080040e0
 8000d80:	080040ec 	.word	0x080040ec
 8000d84:	080040fc 	.word	0x080040fc
 8000d88:	200000c4 	.word	0x200000c4

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 f93c 	bl	8004018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e06:	2304      	movs	r3, #4
 8000e08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fa36 	bl	8002284 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e1e:	f000 f83d 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2302      	movs	r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fc8e 	bl	8002760 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4a:	f000 f827 	bl	8000e9c <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	@ 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
   if (htim->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e70:	d109      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
   {
	  TIMER2_FLAG= 1;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)"In_ISR\n\r", strlen("In_ISR\n\r"), 0xFFFF);
 8000e78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	4905      	ldr	r1, [pc, #20]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e82:	f002 faba 	bl	80033fa <HAL_UART_Transmit>
   }
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000c4 	.word	0x200000c4
 8000e94:	08004110 	.word	0x08004110
 8000e98:	20000108 	.word	0x20000108

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	f000 fe76 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 f985 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <TIM2_IRQHandler+0x10>)
 8000f5e:	f001 fe6e 	bl	8002c3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000c8 	.word	0x200000c8

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <SystemInit+0x28>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <SystemInit+0x28>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <SystemInit+0x28>)
 8000f82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f86:	609a      	str	r2, [r3, #8]
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fbe:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fda:	2280      	movs	r2, #128	@ 0x80
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000fe0:	f001 fdde 	bl	8002ba0 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fea:	f7ff ff57 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_TIM2_Init+0x98>)
 8000ffc:	f001 ff27 	bl	8002e4e <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001006:	f7ff ff49 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <MX_TIM2_Init+0x98>)
 8001018:	f002 f920 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001022:	f7ff ff3b 	bl	8000e9c <Error_Handler>
  }

}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000c8 	.word	0x200000c8

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d115      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_TIM_Base_MspInit+0x48>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	201c      	movs	r0, #28
 8001068:	f000 fdc1 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800106c:	201c      	movs	r0, #28
 800106e:	f000 fdda 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f002 f952 	bl	8003360 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f7ff feeb 	bl	8000e9c <Error_Handler>
  }

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000108 	.word	0x20000108
 80010d0:	40004400 	.word	0x40004400

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <HAL_UART_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12b      	bne.n	800114e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_UART_MspInit+0x88>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a17      	ldr	r2, [pc, #92]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_UART_MspInit+0x88>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HAL_UART_MspInit+0x8c>)
 800114a:	f000 fd87 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800119c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001174:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
  ldr  r2, =_sbss
 800117e:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800118e:	f7ff feed 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f002 ff59 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff fd8f 	bl	8000cb8 <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800119c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011a0:	0800416c 	.word	0x0800416c
  ldr  r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80011ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80011b0:	2000014c 	.word	0x2000014c

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 fcf9 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fe5c 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fd11 	bl	8001c42 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 fcd9 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000148 	.word	0x20000148

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000148 	.word	0x20000148

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e033      	b.n	8001362 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f93c 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800132a:	f023 0302 	bic.w	r3, r3, #2
 800132e:	f043 0202 	orr.w	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fa82 	bl	8001840 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
 8001352:	e001      	b.n	8001358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Start+0x1a>
 8001382:	2302      	movs	r3, #2
 8001384:	e08a      	b.n	800149c <HAL_ADC_Start+0x130>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d018      	beq.n	80013ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <HAL_ADC_Start+0x13c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <HAL_ADC_Start+0x140>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9a      	lsrs	r2, r3, #18
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d15e      	bne.n	800149a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001406:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800141a:	d106      	bne.n	800142a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001420:	f023 0206 	bic.w	r2, r3, #6
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44
 8001428:	e002      	b.n	8001430 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_ADC_Start+0x144>)
 800143a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001444:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d11c      	bne.n	800149a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e013      	b.n	800149a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <HAL_ADC_Start+0x148>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d10e      	bne.n	800149a <HAL_ADC_Start+0x12e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001498:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	40012300 	.word	0x40012300
 80014b4:	40012000 	.word	0x40012000

080014b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d4:	d113      	bne.n	80014fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014e4:	d10b      	bne.n	80014fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f043 0220 	orr.w	r2, r3, #32
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e05c      	b.n	80015b8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014fe:	f7ff fec1 	bl	8001284 <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001504:	e01a      	b.n	800153c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d016      	beq.n	800153c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_ADC_PollForConversion+0x6c>
 8001514:	f7ff feb6 	bl	8001284 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d20b      	bcs.n	800153c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e03d      	b.n	80015b8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d1dd      	bne.n	8001506 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f06f 0212 	mvn.w	r2, #18
 8001552:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11f      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800158e:	2b00      	cmp	r3, #0
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1c>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e113      	b.n	8001820 <HAL_ADC_ConfigChannel+0x244>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b09      	cmp	r3, #9
 8001606:	d925      	bls.n	8001654 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68d9      	ldr	r1, [r3, #12]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	3b1e      	subs	r3, #30
 800161e:	2207      	movs	r2, #7
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43da      	mvns	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	400a      	ands	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68d9      	ldr	r1, [r3, #12]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	4603      	mov	r3, r0
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4403      	add	r3, r0
 8001646:	3b1e      	subs	r3, #30
 8001648:	409a      	lsls	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	e022      	b.n	800169a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6919      	ldr	r1, [r3, #16]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	4603      	mov	r3, r0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4403      	add	r3, r0
 8001690:	409a      	lsls	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d824      	bhi.n	80016ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	3b05      	subs	r3, #5
 80016b4:	221f      	movs	r2, #31
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	400a      	ands	r2, r1
 80016c2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3b05      	subs	r3, #5
 80016de:	fa00 f203 	lsl.w	r2, r0, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ea:	e04c      	b.n	8001786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d824      	bhi.n	800173e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b23      	subs	r3, #35	@ 0x23
 8001706:	221f      	movs	r2, #31
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b23      	subs	r3, #35	@ 0x23
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
 800173c:	e023      	b.n	8001786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b41      	subs	r3, #65	@ 0x41
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b41      	subs	r3, #65	@ 0x41
 800177a:	fa00 f203 	lsl.w	r2, r0, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001786:	4b29      	ldr	r3, [pc, #164]	@ (800182c <HAL_ADC_ConfigChannel+0x250>)
 8001788:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <HAL_ADC_ConfigChannel+0x254>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d10f      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d8>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d10b      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <HAL_ADC_ConfigChannel+0x254>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12b      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x23a>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <HAL_ADC_ConfigChannel+0x258>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0x1f4>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b11      	cmp	r3, #17
 80017ce:	d122      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_ADC_ConfigChannel+0x258>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d111      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_ADC_ConfigChannel+0x25c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_ADC_ConfigChannel+0x260>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	0c9a      	lsrs	r2, r3, #18
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40012300 	.word	0x40012300
 8001830:	40012000 	.word	0x40012000
 8001834:	10000012 	.word	0x10000012
 8001838:	20000000 	.word	0x20000000
 800183c:	431bde83 	.word	0x431bde83

08001840 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001848:	4b79      	ldr	r3, [pc, #484]	@ (8001a30 <ADC_Init+0x1f0>)
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	431a      	orrs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	021a      	lsls	r2, r3, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <ADC_Init+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	e00f      	b.n	800193e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800192c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800193c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0202 	bic.w	r2, r2, #2
 800194c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7e1b      	ldrb	r3, [r3, #24]
 8001958:	005a      	lsls	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01b      	beq.n	80019a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800197a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800198a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	3b01      	subs	r3, #1
 8001998:	035a      	lsls	r2, r3, #13
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	e007      	b.n	80019b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	051a      	lsls	r2, r3, #20
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019f6:	025a      	lsls	r2, r3, #9
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6899      	ldr	r1, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	029a      	lsls	r2, r3, #10
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40012300 	.word	0x40012300
 8001a34:	0f000001 	.word	0x0f000001

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	@ (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff29 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff3e 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff8e 	bl	8001b2c <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5d 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff31 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e159      	b.n	8001f2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8148 	bne.w	8001f26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0xfc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a2 	beq.w	8001f26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a56      	ldr	r2, [pc, #344]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b54      	ldr	r3, [pc, #336]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	@ (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x202>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a48      	ldr	r2, [pc, #288]	@ (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x1fe>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a47      	ldr	r2, [pc, #284]	@ (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a46      	ldr	r2, [pc, #280]	@ (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x1f6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a45      	ldr	r2, [pc, #276]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x1f2>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f002 0203 	and.w	r2, r2, #3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	@ (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ecc:	4a24      	ldr	r2, [pc, #144]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a0f      	ldr	r2, [pc, #60]	@ (8001f60 <HAL_GPIO_Init+0x304>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	f67f aea2 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb0:	e003      	b.n	8001fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	041a      	lsls	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	401a      	ands	r2, r3
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d104      	bne.n	8001fea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12b      	b.n	8002266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fd78 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	@ 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f000 fd76 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a81      	ldr	r2, [pc, #516]	@ (8002270 <HAL_I2C_Init+0x274>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a80      	ldr	r2, [pc, #512]	@ (8002274 <HAL_I2C_Init+0x278>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a7d      	ldr	r2, [pc, #500]	@ (8002278 <HAL_I2C_Init+0x27c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0e7      	b.n	8002266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a78      	ldr	r2, [pc, #480]	@ (800227c <HAL_I2C_Init+0x280>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002270 <HAL_I2C_Init+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_I2C_Init+0x284>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	495c      	ldr	r1, [pc, #368]	@ (8002270 <HAL_I2C_Init+0x274>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d819      	bhi.n	8002138 <HAL_I2C_Init+0x13c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_I2C_Init+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb1 f3f3 	udiv	r3, r1, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	e051      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002134:	2304      	movs	r3, #4
 8002136:	e04f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_I2C_Init+0x168>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e012      	b.n	800218a <HAL_I2C_Init+0x18e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Init+0x196>
 800218e:	2301      	movs	r3, #1
 8002190:	e022      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_I2C_Init+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e58      	subs	r0, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6809      	ldr	r1, [r1, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002206:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6911      	ldr	r1, [r2, #16]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000186a0 	.word	0x000186a0
 8002274:	001e847f 	.word	0x001e847f
 8002278:	003d08ff 	.word	0x003d08ff
 800227c:	431bde83 	.word	0x431bde83
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e25e      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d075      	beq.n	800238e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a2:	4b88      	ldr	r3, [pc, #544]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d00c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b85      	ldr	r3, [pc, #532]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d112      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b82      	ldr	r3, [pc, #520]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4b7e      	ldr	r3, [pc, #504]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05b      	beq.n	800238c <HAL_RCC_OscConfig+0x108>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d157      	bne.n	800238c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e239      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_OscConfig+0x74>
 80022ea:	4b76      	ldr	r3, [pc, #472]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e01d      	b.n	8002334 <HAL_RCC_OscConfig+0xb0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x98>
 8002302:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6f      	ldr	r2, [pc, #444]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b6d      	ldr	r3, [pc, #436]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6c      	ldr	r2, [pc, #432]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0xb0>
 800231c:	4b69      	ldr	r3, [pc, #420]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a68      	ldr	r2, [pc, #416]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b66      	ldr	r3, [pc, #408]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a65      	ldr	r2, [pc, #404]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 800232e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe ffa2 	bl	8001284 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe ff9e 	bl	8001284 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1fe      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b5b      	ldr	r3, [pc, #364]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0xc0>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe ff8e 	bl	8001284 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe ff8a 	bl	8001284 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1ea      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	4b51      	ldr	r3, [pc, #324]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0xe8>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d063      	beq.n	8002462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800239a:	4b4a      	ldr	r3, [pc, #296]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d11c      	bne.n	80023ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b44      	ldr	r3, [pc, #272]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d116      	bne.n	80023ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x152>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1be      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4937      	ldr	r1, [pc, #220]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	e03a      	b.n	8002462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f4:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <HAL_RCC_OscConfig+0x244>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe ff43 	bl	8001284 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe ff3f 	bl	8001284 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e19f      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4925      	ldr	r1, [pc, #148]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_OscConfig+0x244>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe ff22 	bl	8001284 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe ff1e 	bl	8001284 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e17e      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d036      	beq.n	80024dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <HAL_RCC_OscConfig+0x248>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7fe ff02 	bl	8001284 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fefe 	bl	8001284 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e15e      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_OscConfig+0x240>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x200>
 80024a2:	e01b      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_OscConfig+0x248>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe feeb 	bl	8001284 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	e00e      	b.n	80024d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b2:	f7fe fee7 	bl	8001284 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d907      	bls.n	80024d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e147      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470000 	.word	0x42470000
 80024cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b88      	ldr	r3, [pc, #544]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ea      	bne.n	80024b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8097 	beq.w	8002618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b81      	ldr	r3, [pc, #516]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b7d      	ldr	r3, [pc, #500]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a7c      	ldr	r2, [pc, #496]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b7a      	ldr	r3, [pc, #488]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b77      	ldr	r3, [pc, #476]	@ (80026f8 <HAL_RCC_OscConfig+0x474>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b74      	ldr	r3, [pc, #464]	@ (80026f8 <HAL_RCC_OscConfig+0x474>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	@ (80026f8 <HAL_RCC_OscConfig+0x474>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fea7 	bl	8001284 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fea3 	bl	8001284 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e103      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_OscConfig+0x474>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x2ea>
 8002560:	4b64      	ldr	r3, [pc, #400]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002564:	4a63      	ldr	r2, [pc, #396]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	@ 0x70
 800256c:	e01c      	b.n	80025a8 <HAL_RCC_OscConfig+0x324>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x30c>
 8002576:	4b5f      	ldr	r3, [pc, #380]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	4a5e      	ldr	r2, [pc, #376]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	@ 0x70
 8002582:	4b5c      	ldr	r3, [pc, #368]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002586:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	@ 0x70
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0x324>
 8002590:	4b58      	ldr	r3, [pc, #352]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	4a57      	ldr	r2, [pc, #348]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	@ 0x70
 800259c:	4b55      	ldr	r3, [pc, #340]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	4a54      	ldr	r2, [pc, #336]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fe68 	bl	8001284 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fe64 	bl	8001284 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0c2      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	4b49      	ldr	r3, [pc, #292]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ee      	beq.n	80025b8 <HAL_RCC_OscConfig+0x334>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fe52 	bl	8001284 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe fe4e 	bl	8001284 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0ac      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ee      	bne.n	80025e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b39      	ldr	r3, [pc, #228]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	4a38      	ldr	r2, [pc, #224]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8098 	beq.w	8002752 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002622:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d05c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d141      	bne.n	80026ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fe22 	bl	8001284 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fe1e 	bl	8001284 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e07e      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	019b      	lsls	r3, r3, #6
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	491b      	ldr	r1, [pc, #108]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCC_OscConfig+0x478>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fdf7 	bl	8001284 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fdf3 	bl	8001284 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e053      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x416>
 80026b8:	e04b      	b.n	8002752 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_RCC_OscConfig+0x478>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fde0 	bl	8001284 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fddc 	bl	8001284 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e03c      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x444>
 80026e6:	e034      	b.n	8002752 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e02f      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_RCC_OscConfig+0x4d8>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	d11c      	bne.n	800274e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d115      	bne.n	800274e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800272e:	4293      	cmp	r3, r2
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800

08002760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cc      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b68      	ldr	r3, [pc, #416]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d90c      	bls.n	800279c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b65      	ldr	r3, [pc, #404]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a58      	ldr	r2, [pc, #352]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a52      	ldr	r2, [pc, #328]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d044      	beq.n	8002880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d119      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d003      	beq.n	800281e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	2b03      	cmp	r3, #3
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e067      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283e:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4934      	ldr	r1, [pc, #208]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002850:	f7fe fd18 	bl	8001284 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe fd14 	bl	8001284 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e04f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 020c 	and.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1eb      	bne.n	8002858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b25      	ldr	r3, [pc, #148]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d20c      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 f821 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc78 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023c00 	.word	0x40023c00
 800291c:	40023800 	.word	0x40023800
 8002920:	0800411c 	.word	0x0800411c
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004

0800292c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002930:	b094      	sub	sp, #80	@ 0x50
 8002932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	647b      	str	r3, [r7, #68]	@ 0x44
 8002938:	2300      	movs	r3, #0
 800293a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800293c:	2300      	movs	r3, #0
 800293e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002944:	4b79      	ldr	r3, [pc, #484]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d00d      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x40>
 8002950:	2b08      	cmp	r3, #8
 8002952:	f200 80e1 	bhi.w	8002b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x34>
 800295a:	2b04      	cmp	r3, #4
 800295c:	d003      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x3a>
 800295e:	e0db      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b73      	ldr	r3, [pc, #460]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002962:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002964:	e0db      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b73      	ldr	r3, [pc, #460]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8002968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800296a:	e0d8      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002974:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	4b6d      	ldr	r3, [pc, #436]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d063      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	2200      	movs	r2, #0
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800298c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800298e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002994:	633b      	str	r3, [r7, #48]	@ 0x30
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
 800299a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800299e:	4622      	mov	r2, r4
 80029a0:	462b      	mov	r3, r5
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	0159      	lsls	r1, r3, #5
 80029ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b0:	0150      	lsls	r0, r2, #5
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4621      	mov	r1, r4
 80029b8:	1a51      	subs	r1, r2, r1
 80029ba:	6139      	str	r1, [r7, #16]
 80029bc:	4629      	mov	r1, r5
 80029be:	eb63 0301 	sbc.w	r3, r3, r1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d0:	4659      	mov	r1, fp
 80029d2:	018b      	lsls	r3, r1, #6
 80029d4:	4651      	mov	r1, sl
 80029d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029da:	4651      	mov	r1, sl
 80029dc:	018a      	lsls	r2, r1, #6
 80029de:	4651      	mov	r1, sl
 80029e0:	ebb2 0801 	subs.w	r8, r2, r1
 80029e4:	4659      	mov	r1, fp
 80029e6:	eb63 0901 	sbc.w	r9, r3, r1
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029fe:	4690      	mov	r8, r2
 8002a00:	4699      	mov	r9, r3
 8002a02:	4623      	mov	r3, r4
 8002a04:	eb18 0303 	adds.w	r3, r8, r3
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	462b      	mov	r3, r5
 8002a0c:	eb49 0303 	adc.w	r3, r9, r3
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	024b      	lsls	r3, r1, #9
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a28:	4621      	mov	r1, r4
 8002a2a:	024a      	lsls	r2, r1, #9
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a32:	2200      	movs	r2, #0
 8002a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a3c:	f7fd fbd4 	bl	80001e8 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a48:	e058      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	4611      	mov	r1, r2
 8002a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	f04f 0000 	mov.w	r0, #0
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	0159      	lsls	r1, r3, #5
 8002a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a76:	0150      	lsls	r0, r2, #5
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a82:	4649      	mov	r1, r9
 8002a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	00eb      	lsls	r3, r5, #3
 8002aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab2:	00e2      	lsls	r2, r4, #3
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	18e3      	adds	r3, r4, r3
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	464b      	mov	r3, r9
 8002ac0:	eb45 0303 	adc.w	r3, r5, r3
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	028b      	lsls	r3, r1, #10
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002adc:	4621      	mov	r1, r4
 8002ade:	028a      	lsls	r2, r1, #10
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	61fa      	str	r2, [r7, #28]
 8002aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af0:	f7fd fb7a 	bl	80001e8 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3750      	adds	r7, #80	@ 0x50
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	007a1200 	.word	0x007a1200

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800412c 	.word	0x0800412c

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	f7ff ffdc 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800412c 	.word	0x0800412c

08002ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e01d      	b.n	8002bee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fa34 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 fa22 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d007      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d122      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d11b      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0202 	mvn.w	r2, #2
 8002c6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9b2 	bl	8002fea <HAL_TIM_IC_CaptureCallback>
 8002c86:	e005      	b.n	8002c94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f9a4 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9b5 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d122      	bne.n	8002cee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d11b      	bne.n	8002cee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0204 	mvn.w	r2, #4
 8002cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f988 	bl	8002fea <HAL_TIM_IC_CaptureCallback>
 8002cda:	e005      	b.n	8002ce8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f97a 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f98b 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d122      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11b      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0208 	mvn.w	r2, #8
 8002d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2204      	movs	r2, #4
 8002d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f95e 	bl	8002fea <HAL_TIM_IC_CaptureCallback>
 8002d2e:	e005      	b.n	8002d3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f950 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f961 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d122      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d11b      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f06f 0210 	mvn.w	r2, #16
 8002d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f934 	bl	8002fea <HAL_TIM_IC_CaptureCallback>
 8002d82:	e005      	b.n	8002d90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f926 	bl	8002fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f937 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0201 	mvn.w	r2, #1
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe f84f 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dcc:	2b80      	cmp	r3, #128	@ 0x80
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 faaf 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d10e      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e06:	2b40      	cmp	r3, #64	@ 0x40
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f8fc 	bl	8003012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d10e      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0220 	mvn.w	r2, #32
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa79 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_ConfigClockSource+0x18>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0b3      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x180>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9e:	d03e      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xd0>
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea4:	f200 8087 	bhi.w	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eac:	f000 8085 	beq.w	8002fba <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb4:	d87f      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002eb6:	2b70      	cmp	r3, #112	@ 0x70
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0xa2>
 8002eba:	2b70      	cmp	r3, #112	@ 0x70
 8002ebc:	d87b      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ebe:	2b60      	cmp	r3, #96	@ 0x60
 8002ec0:	d050      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x116>
 8002ec2:	2b60      	cmp	r3, #96	@ 0x60
 8002ec4:	d877      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ec6:	2b50      	cmp	r3, #80	@ 0x50
 8002ec8:	d03c      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xf6>
 8002eca:	2b50      	cmp	r3, #80	@ 0x50
 8002ecc:	d873      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d058      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x136>
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d86f      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ed6:	2b30      	cmp	r3, #48	@ 0x30
 8002ed8:	d064      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x156>
 8002eda:	2b30      	cmp	r3, #48	@ 0x30
 8002edc:	d86b      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d060      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x156>
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d867      	bhi.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d05c      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x156>
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d05a      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002eee:	e062      	b.n	8002fb6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f000 f98c 	bl	800321c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
      break;
 8002f1c:	e04e      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 f975 	bl	800321c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e03b      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f000 f8e9 	bl	8003128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2150      	movs	r1, #80	@ 0x50
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f942 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002f62:	e02b      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 f908 	bl	8003186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2160      	movs	r1, #96	@ 0x60
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f932 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002f82:	e01b      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f000 f8c9 	bl	8003128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2140      	movs	r1, #64	@ 0x40
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f922 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e00b      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 f919 	bl	80031e6 <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e002      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <TIM_Base_SetConfig+0xe4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00f      	beq.n	8003060 <TIM_Base_SetConfig+0x38>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d00b      	beq.n	8003060 <TIM_Base_SetConfig+0x38>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a31      	ldr	r2, [pc, #196]	@ (8003110 <TIM_Base_SetConfig+0xe8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <TIM_Base_SetConfig+0x38>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a30      	ldr	r2, [pc, #192]	@ (8003114 <TIM_Base_SetConfig+0xec>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_Base_SetConfig+0x38>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2f      	ldr	r2, [pc, #188]	@ (8003118 <TIM_Base_SetConfig+0xf0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d108      	bne.n	8003072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a25      	ldr	r2, [pc, #148]	@ (800310c <TIM_Base_SetConfig+0xe4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01b      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003080:	d017      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <TIM_Base_SetConfig+0xe8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <TIM_Base_SetConfig+0xec>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00f      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <TIM_Base_SetConfig+0xf0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00b      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1f      	ldr	r2, [pc, #124]	@ (800311c <TIM_Base_SetConfig+0xf4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003120 <TIM_Base_SetConfig+0xf8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_Base_SetConfig+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <TIM_Base_SetConfig+0xfc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d108      	bne.n	80030c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a08      	ldr	r2, [pc, #32]	@ (800310c <TIM_Base_SetConfig+0xe4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d103      	bne.n	80030f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	615a      	str	r2, [r3, #20]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800

08003128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f023 0201 	bic.w	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 030a 	bic.w	r3, r3, #10
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	f043 0307 	orr.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	431a      	orrs	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e050      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c0:	d013      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	@ (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a16      	ldr	r2, [pc, #88]	@ (800332c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e03f      	b.n	80033f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fea4 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	@ 0x24
 8003390:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f90b 	bl	80035c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af02      	add	r7, sp, #8
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	f040 8083 	bne.w	8003522 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_UART_Transmit+0x2e>
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e07b      	b.n	8003524 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_UART_Transmit+0x40>
 8003436:	2302      	movs	r3, #2
 8003438:	e074      	b.n	8003524 <HAL_UART_Transmit+0x12a>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2221      	movs	r2, #33	@ 0x21
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003450:	f7fd ff18 	bl	8001284 <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800346a:	e042      	b.n	80034f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d122      	bne.n	80034ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f84c 	bl	800352c <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e042      	b.n	8003524 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3302      	adds	r3, #2
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	e017      	b.n	80034f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	e013      	b.n	80034f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	@ 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f829 	bl	800352c <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e01f      	b.n	8003524 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	60ba      	str	r2, [r7, #8]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1b7      	bne.n	800346c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2200      	movs	r2, #0
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f810 	bl	800352c <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e006      	b.n	8003524 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353c:	e02c      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d028      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x30>
 800354c:	f7fd fe9a 	bl	8001284 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	429a      	cmp	r2, r3
 800355a:	d21d      	bcs.n	8003598 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800356a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e00f      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d0c3      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	ea40 0301 	orr.w	r3, r0, r1
 80035ea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	431a      	orrs	r2, r3
 8003602:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800360e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800361a:	f021 010c 	bic.w	r1, r1, #12
 800361e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003628:	430b      	orrs	r3, r1
 800362a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003638:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	ea40 0301 	orr.w	r3, r0, r1
 8003648:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003654:	f040 824a 	bne.w	8003aec <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003658:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b96      	ldr	r3, [pc, #600]	@ (80038b8 <UART_SetConfig+0x2f8>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d006      	beq.n	8003672 <UART_SetConfig+0xb2>
 8003664:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b94      	ldr	r3, [pc, #592]	@ (80038bc <UART_SetConfig+0x2fc>)
 800366c:	429a      	cmp	r2, r3
 800366e:	f040 8129 	bne.w	80038c4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003672:	f7ff fa81 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8003676:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800367a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8003684:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8003688:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 800368c:	4622      	mov	r2, r4
 800368e:	462b      	mov	r3, r5
 8003690:	1891      	adds	r1, r2, r2
 8003692:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003696:	415b      	adcs	r3, r3
 8003698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800369c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80036a0:	4621      	mov	r1, r4
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80036a8:	4629      	mov	r1, r5
 80036aa:	414b      	adcs	r3, r1
 80036ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80036bc:	4649      	mov	r1, r9
 80036be:	00cb      	lsls	r3, r1, #3
 80036c0:	4641      	mov	r1, r8
 80036c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c6:	4641      	mov	r1, r8
 80036c8:	00ca      	lsls	r2, r1, #3
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	4622      	mov	r2, r4
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80036d8:	462b      	mov	r3, r5
 80036da:	460a      	mov	r2, r1
 80036dc:	eb42 0303 	adc.w	r3, r2, r3
 80036e0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80036e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80036f0:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80036f4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80036f8:	460b      	mov	r3, r1
 80036fa:	18db      	adds	r3, r3, r3
 80036fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003700:	4613      	mov	r3, r2
 8003702:	eb42 0303 	adc.w	r3, r2, r3
 8003706:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800370a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800370e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8003712:	f7fc fd69 	bl	80001e8 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b69      	ldr	r3, [pc, #420]	@ (80038c0 <UART_SetConfig+0x300>)
 800371c:	fba3 2302 	umull	r2, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	011c      	lsls	r4, r3, #4
 8003724:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800372e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003732:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8003736:	4642      	mov	r2, r8
 8003738:	464b      	mov	r3, r9
 800373a:	1891      	adds	r1, r2, r2
 800373c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8003740:	415b      	adcs	r3, r3
 8003742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003746:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800374a:	4641      	mov	r1, r8
 800374c:	1851      	adds	r1, r2, r1
 800374e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003752:	4649      	mov	r1, r9
 8003754:	414b      	adcs	r3, r1
 8003756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8003766:	4659      	mov	r1, fp
 8003768:	00cb      	lsls	r3, r1, #3
 800376a:	4651      	mov	r1, sl
 800376c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003770:	4651      	mov	r1, sl
 8003772:	00ca      	lsls	r2, r1, #3
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	4603      	mov	r3, r0
 800377a:	4642      	mov	r2, r8
 800377c:	189b      	adds	r3, r3, r2
 800377e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003782:	464b      	mov	r3, r9
 8003784:	460a      	mov	r2, r1
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800378e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800379a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800379e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80037a2:	460b      	mov	r3, r1
 80037a4:	18db      	adds	r3, r3, r3
 80037a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037aa:	4613      	mov	r3, r2
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80037b8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80037bc:	f7fc fd14 	bl	80001e8 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4611      	mov	r1, r2
 80037c6:	4b3e      	ldr	r3, [pc, #248]	@ (80038c0 <UART_SetConfig+0x300>)
 80037c8:	fba3 2301 	umull	r2, r3, r3, r1
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2264      	movs	r2, #100	@ 0x64
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	1acb      	subs	r3, r1, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037dc:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <UART_SetConfig+0x300>)
 80037de:	fba3 2302 	umull	r2, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037ea:	441c      	add	r4, r3
 80037ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80037f6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80037fa:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	1891      	adds	r1, r2, r2
 8003804:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003808:	415b      	adcs	r3, r3
 800380a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800380e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003812:	4641      	mov	r1, r8
 8003814:	1851      	adds	r1, r2, r1
 8003816:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800381a:	4649      	mov	r1, r9
 800381c:	414b      	adcs	r3, r1
 800381e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800382e:	4659      	mov	r1, fp
 8003830:	00cb      	lsls	r3, r1, #3
 8003832:	4651      	mov	r1, sl
 8003834:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003838:	4651      	mov	r1, sl
 800383a:	00ca      	lsls	r2, r1, #3
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	4603      	mov	r3, r0
 8003842:	4642      	mov	r2, r8
 8003844:	189b      	adds	r3, r3, r2
 8003846:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800384a:	464b      	mov	r3, r9
 800384c:	460a      	mov	r2, r1
 800384e:	eb42 0303 	adc.w	r3, r2, r3
 8003852:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003856:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003862:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003866:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800386a:	460b      	mov	r3, r1
 800386c:	18db      	adds	r3, r3, r3
 800386e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003872:	4613      	mov	r3, r2
 8003874:	eb42 0303 	adc.w	r3, r2, r3
 8003878:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800387c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003880:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003884:	f7fc fcb0 	bl	80001e8 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <UART_SetConfig+0x300>)
 800388e:	fba3 1302 	umull	r1, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2164      	movs	r1, #100	@ 0x64
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	3332      	adds	r3, #50	@ 0x32
 80038a0:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <UART_SetConfig+0x300>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 0207 	and.w	r2, r3, #7
 80038ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4422      	add	r2, r4
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	e34a      	b.n	8003f4e <UART_SetConfig+0x98e>
 80038b8:	40011000 	.word	0x40011000
 80038bc:	40011400 	.word	0x40011400
 80038c0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7ff f944 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80038c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80038d6:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80038da:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	1891      	adds	r1, r2, r2
 80038e4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80038e8:	415b      	adcs	r3, r3
 80038ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80038f2:	4621      	mov	r1, r4
 80038f4:	eb12 0a01 	adds.w	sl, r2, r1
 80038f8:	4629      	mov	r1, r5
 80038fa:	eb43 0b01 	adc.w	fp, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800390a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800390e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003912:	4692      	mov	sl, r2
 8003914:	469b      	mov	fp, r3
 8003916:	4623      	mov	r3, r4
 8003918:	eb1a 0303 	adds.w	r3, sl, r3
 800391c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003920:	462b      	mov	r3, r5
 8003922:	eb4b 0303 	adc.w	r3, fp, r3
 8003926:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800392a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003936:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800393a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800393e:	460b      	mov	r3, r1
 8003940:	18db      	adds	r3, r3, r3
 8003942:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003946:	4613      	mov	r3, r2
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003950:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003954:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8003958:	f7fc fc46 	bl	80001e8 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b61      	ldr	r3, [pc, #388]	@ (8003ae8 <UART_SetConfig+0x528>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	011c      	lsls	r4, r3, #4
 800396a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003974:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003978:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003984:	415b      	adcs	r3, r3
 8003986:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003988:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800398c:	4641      	mov	r1, r8
 800398e:	1851      	adds	r1, r2, r1
 8003990:	6739      	str	r1, [r7, #112]	@ 0x70
 8003992:	4649      	mov	r1, r9
 8003994:	414b      	adcs	r3, r1
 8003996:	677b      	str	r3, [r7, #116]	@ 0x74
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80039a4:	4659      	mov	r1, fp
 80039a6:	00cb      	lsls	r3, r1, #3
 80039a8:	4651      	mov	r1, sl
 80039aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ae:	4651      	mov	r1, sl
 80039b0:	00ca      	lsls	r2, r1, #3
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	4642      	mov	r2, r8
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80039c0:	464b      	mov	r3, r9
 80039c2:	460a      	mov	r2, r1
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80039cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80039d8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80039dc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80039e0:	460b      	mov	r3, r1
 80039e2:	18db      	adds	r3, r3, r3
 80039e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039e6:	4613      	mov	r3, r2
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80039f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80039f6:	f7fc fbf7 	bl	80001e8 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <UART_SetConfig+0x528>)
 8003a02:	fba3 2301 	umull	r2, r3, r3, r1
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2264      	movs	r2, #100	@ 0x64
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	1acb      	subs	r3, r1, r3
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a16:	4b34      	ldr	r3, [pc, #208]	@ (8003ae8 <UART_SetConfig+0x528>)
 8003a18:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a24:	441c      	add	r4, r3
 8003a26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8003a30:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003a34:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	1891      	adds	r1, r2, r2
 8003a3e:	6639      	str	r1, [r7, #96]	@ 0x60
 8003a40:	415b      	adcs	r3, r3
 8003a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a44:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003a48:	4641      	mov	r1, r8
 8003a4a:	1851      	adds	r1, r2, r1
 8003a4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a4e:	4649      	mov	r1, r9
 8003a50:	414b      	adcs	r3, r1
 8003a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8003a60:	4659      	mov	r1, fp
 8003a62:	00cb      	lsls	r3, r1, #3
 8003a64:	4651      	mov	r1, sl
 8003a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	00ca      	lsls	r2, r1, #3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	4642      	mov	r2, r8
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	460a      	mov	r2, r1
 8003a80:	eb42 0303 	adc.w	r3, r2, r3
 8003a84:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8003a88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003a94:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8003a98:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	18db      	adds	r3, r3, r3
 8003aa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003aae:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003ab2:	f7fc fb99 	bl	80001e8 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <UART_SetConfig+0x528>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	@ 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	@ 0x32
 8003ace:	4a06      	ldr	r2, [pc, #24]	@ (8003ae8 <UART_SetConfig+0x528>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4422      	add	r2, r4
 8003ae2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ae4:	e233      	b.n	8003f4e <UART_SetConfig+0x98e>
 8003ae6:	bf00      	nop
 8003ae8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d28 <UART_SetConfig+0x768>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d006      	beq.n	8003b06 <UART_SetConfig+0x546>
 8003af8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b8b      	ldr	r3, [pc, #556]	@ (8003d2c <UART_SetConfig+0x76c>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f040 8117 	bne.w	8003d34 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b06:	f7ff f837 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8003b0a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003b18:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003b1c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003b20:	4622      	mov	r2, r4
 8003b22:	462b      	mov	r3, r5
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b30:	4621      	mov	r1, r4
 8003b32:	eb12 0801 	adds.w	r8, r2, r1
 8003b36:	4629      	mov	r1, r5
 8003b38:	eb43 0901 	adc.w	r9, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b50:	4690      	mov	r8, r2
 8003b52:	4699      	mov	r9, r3
 8003b54:	4623      	mov	r3, r4
 8003b56:	eb18 0303 	adds.w	r3, r8, r3
 8003b5a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003b5e:	462b      	mov	r3, r5
 8003b60:	eb49 0303 	adc.w	r3, r9, r3
 8003b64:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003b68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b74:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8003b84:	4629      	mov	r1, r5
 8003b86:	008b      	lsls	r3, r1, #2
 8003b88:	4621      	mov	r1, r4
 8003b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8e:	4621      	mov	r1, r4
 8003b90:	008a      	lsls	r2, r1, #2
 8003b92:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003b96:	f7fc fb27 	bl	80001e8 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4b64      	ldr	r3, [pc, #400]	@ (8003d30 <UART_SetConfig+0x770>)
 8003ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	011c      	lsls	r4, r3, #4
 8003ba8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003bb2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003bb6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8003bba:	4642      	mov	r2, r8
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	6439      	str	r1, [r7, #64]	@ 0x40
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bca:	4641      	mov	r1, r8
 8003bcc:	1851      	adds	r1, r2, r1
 8003bce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	414b      	adcs	r3, r1
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8003be2:	4659      	mov	r1, fp
 8003be4:	00cb      	lsls	r3, r1, #3
 8003be6:	4651      	mov	r1, sl
 8003be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bec:	4651      	mov	r1, sl
 8003bee:	00ca      	lsls	r2, r1, #3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4642      	mov	r2, r8
 8003bf8:	189b      	adds	r3, r3, r2
 8003bfa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003bfe:	464b      	mov	r3, r9
 8003c00:	460a      	mov	r2, r1
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003c16:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8003c26:	4649      	mov	r1, r9
 8003c28:	008b      	lsls	r3, r1, #2
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c30:	4641      	mov	r1, r8
 8003c32:	008a      	lsls	r2, r1, #2
 8003c34:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003c38:	f7fc fad6 	bl	80001e8 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <UART_SetConfig+0x770>)
 8003c44:	fba3 2301 	umull	r2, r3, r3, r1
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2264      	movs	r2, #100	@ 0x64
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	1acb      	subs	r3, r1, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	@ 0x32
 8003c56:	4a36      	ldr	r2, [pc, #216]	@ (8003d30 <UART_SetConfig+0x770>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c62:	441c      	add	r4, r3
 8003c64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003c6e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8003c72:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8003c76:	4642      	mov	r2, r8
 8003c78:	464b      	mov	r3, r9
 8003c7a:	1891      	adds	r1, r2, r2
 8003c7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c7e:	415b      	adcs	r3, r3
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c86:	4641      	mov	r1, r8
 8003c88:	1851      	adds	r1, r2, r1
 8003c8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	414b      	adcs	r3, r1
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	00cb      	lsls	r3, r1, #3
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca8:	4651      	mov	r1, sl
 8003caa:	00ca      	lsls	r2, r1, #3
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4642      	mov	r2, r8
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003cba:	464b      	mov	r3, r9
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	eb42 0303 	adc.w	r3, r2, r3
 8003cc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003cc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003cd2:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	008b      	lsls	r3, r1, #2
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cec:	4641      	mov	r1, r8
 8003cee:	008a      	lsls	r2, r1, #2
 8003cf0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003cf4:	f7fc fa78 	bl	80001e8 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <UART_SetConfig+0x770>)
 8003cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2164      	movs	r1, #100	@ 0x64
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	@ 0x32
 8003d10:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <UART_SetConfig+0x770>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4422      	add	r2, r4
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	e112      	b.n	8003f4e <UART_SetConfig+0x98e>
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d34:	f7fe ff0c 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8003d38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003d46:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003d4a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8003d4e:	4642      	mov	r2, r8
 8003d50:	464b      	mov	r3, r9
 8003d52:	1891      	adds	r1, r2, r2
 8003d54:	6239      	str	r1, [r7, #32]
 8003d56:	415b      	adcs	r3, r3
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d5e:	4641      	mov	r1, r8
 8003d60:	1854      	adds	r4, r2, r1
 8003d62:	4649      	mov	r1, r9
 8003d64:	eb43 0501 	adc.w	r5, r3, r1
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	00eb      	lsls	r3, r5, #3
 8003d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d76:	00e2      	lsls	r2, r4, #3
 8003d78:	4614      	mov	r4, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	18e3      	adds	r3, r4, r3
 8003d80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003d84:	464b      	mov	r3, r9
 8003d86:	eb45 0303 	adc.w	r3, r5, r3
 8003d8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d9a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003daa:	4629      	mov	r1, r5
 8003dac:	008b      	lsls	r3, r1, #2
 8003dae:	4621      	mov	r1, r4
 8003db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db4:	4621      	mov	r1, r4
 8003db6:	008a      	lsls	r2, r1, #2
 8003db8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003dbc:	f7fc fa14 	bl	80001e8 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4b65      	ldr	r3, [pc, #404]	@ (8003f5c <UART_SetConfig+0x99c>)
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	011c      	lsls	r4, r3, #4
 8003dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dd8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003ddc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	1891      	adds	r1, r2, r2
 8003de6:	61b9      	str	r1, [r7, #24]
 8003de8:	415b      	adcs	r3, r3
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df0:	4641      	mov	r1, r8
 8003df2:	1851      	adds	r1, r2, r1
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	4649      	mov	r1, r9
 8003df8:	414b      	adcs	r3, r1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e08:	4659      	mov	r1, fp
 8003e0a:	00cb      	lsls	r3, r1, #3
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e12:	4651      	mov	r1, sl
 8003e14:	00ca      	lsls	r2, r1, #3
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e24:	464b      	mov	r3, r9
 8003e26:	460a      	mov	r2, r1
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e3c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003e5e:	f7fc f9c3 	bl	80001e8 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	4b3c      	ldr	r3, [pc, #240]	@ (8003f5c <UART_SetConfig+0x99c>)
 8003e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2264      	movs	r2, #100	@ 0x64
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	1acb      	subs	r3, r1, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	@ 0x32
 8003e7c:	4a37      	ldr	r2, [pc, #220]	@ (8003f5c <UART_SetConfig+0x99c>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e88:	441c      	add	r4, r3
 8003e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e94:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e98:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	008b      	lsls	r3, r1, #2
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f12:	4641      	mov	r1, r8
 8003f14:	008a      	lsls	r2, r1, #2
 8003f16:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f1a:	f7fc f965 	bl	80001e8 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b0e      	ldr	r3, [pc, #56]	@ (8003f5c <UART_SetConfig+0x99c>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	@ 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	@ 0x32
 8003f36:	4a09      	ldr	r2, [pc, #36]	@ (8003f5c <UART_SetConfig+0x99c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4422      	add	r2, r4
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	e7ff      	b.n	8003f4e <UART_SetConfig+0x98e>
 8003f4e:	bf00      	nop
 8003f50:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	51eb851f 	.word	0x51eb851f

08003f60 <__itoa>:
 8003f60:	1e93      	subs	r3, r2, #2
 8003f62:	2b22      	cmp	r3, #34	@ 0x22
 8003f64:	b510      	push	{r4, lr}
 8003f66:	460c      	mov	r4, r1
 8003f68:	d904      	bls.n	8003f74 <__itoa+0x14>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	700b      	strb	r3, [r1, #0]
 8003f6e:	461c      	mov	r4, r3
 8003f70:	4620      	mov	r0, r4
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	2a0a      	cmp	r2, #10
 8003f76:	d109      	bne.n	8003f8c <__itoa+0x2c>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	da07      	bge.n	8003f8c <__itoa+0x2c>
 8003f7c:	232d      	movs	r3, #45	@ 0x2d
 8003f7e:	700b      	strb	r3, [r1, #0]
 8003f80:	4240      	negs	r0, r0
 8003f82:	2101      	movs	r1, #1
 8003f84:	4421      	add	r1, r4
 8003f86:	f000 f805 	bl	8003f94 <__utoa>
 8003f8a:	e7f1      	b.n	8003f70 <__itoa+0x10>
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	e7f9      	b.n	8003f84 <__itoa+0x24>

08003f90 <itoa>:
 8003f90:	f7ff bfe6 	b.w	8003f60 <__itoa>

08003f94 <__utoa>:
 8003f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f96:	4c1f      	ldr	r4, [pc, #124]	@ (8004014 <__utoa+0x80>)
 8003f98:	b08b      	sub	sp, #44	@ 0x2c
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	466e      	mov	r6, sp
 8003fa0:	f104 0c20 	add.w	ip, r4, #32
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	6861      	ldr	r1, [r4, #4]
 8003fa8:	4637      	mov	r7, r6
 8003faa:	c703      	stmia	r7!, {r0, r1}
 8003fac:	3408      	adds	r4, #8
 8003fae:	4564      	cmp	r4, ip
 8003fb0:	463e      	mov	r6, r7
 8003fb2:	d1f7      	bne.n	8003fa4 <__utoa+0x10>
 8003fb4:	7921      	ldrb	r1, [r4, #4]
 8003fb6:	7139      	strb	r1, [r7, #4]
 8003fb8:	1e91      	subs	r1, r2, #2
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	6038      	str	r0, [r7, #0]
 8003fbe:	2922      	cmp	r1, #34	@ 0x22
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	d904      	bls.n	8003fd0 <__utoa+0x3c>
 8003fc6:	7019      	strb	r1, [r3, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	b00b      	add	sp, #44	@ 0x2c
 8003fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd0:	1e58      	subs	r0, r3, #1
 8003fd2:	4684      	mov	ip, r0
 8003fd4:	fbb5 f7f2 	udiv	r7, r5, r2
 8003fd8:	fb02 5617 	mls	r6, r2, r7, r5
 8003fdc:	3628      	adds	r6, #40	@ 0x28
 8003fde:	446e      	add	r6, sp
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003fe6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003fea:	462e      	mov	r6, r5
 8003fec:	42b2      	cmp	r2, r6
 8003fee:	f101 0101 	add.w	r1, r1, #1
 8003ff2:	463d      	mov	r5, r7
 8003ff4:	d9ee      	bls.n	8003fd4 <__utoa+0x40>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	545a      	strb	r2, [r3, r1]
 8003ffa:	1919      	adds	r1, r3, r4
 8003ffc:	1aa5      	subs	r5, r4, r2
 8003ffe:	42aa      	cmp	r2, r5
 8004000:	dae3      	bge.n	8003fca <__utoa+0x36>
 8004002:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004006:	780e      	ldrb	r6, [r1, #0]
 8004008:	7006      	strb	r6, [r0, #0]
 800400a:	3201      	adds	r2, #1
 800400c:	f801 5901 	strb.w	r5, [r1], #-1
 8004010:	e7f4      	b.n	8003ffc <__utoa+0x68>
 8004012:	bf00      	nop
 8004014:	08004134 	.word	0x08004134

08004018 <memset>:
 8004018:	4402      	add	r2, r0
 800401a:	4603      	mov	r3, r0
 800401c:	4293      	cmp	r3, r2
 800401e:	d100      	bne.n	8004022 <memset+0xa>
 8004020:	4770      	bx	lr
 8004022:	f803 1b01 	strb.w	r1, [r3], #1
 8004026:	e7f9      	b.n	800401c <memset+0x4>

08004028 <strcat>:
 8004028:	b510      	push	{r4, lr}
 800402a:	4602      	mov	r2, r0
 800402c:	7814      	ldrb	r4, [r2, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	3201      	adds	r2, #1
 8004032:	2c00      	cmp	r4, #0
 8004034:	d1fa      	bne.n	800402c <strcat+0x4>
 8004036:	3b01      	subs	r3, #1
 8004038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800403c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004040:	2a00      	cmp	r2, #0
 8004042:	d1f9      	bne.n	8004038 <strcat+0x10>
 8004044:	bd10      	pop	{r4, pc}
	...

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4d0d      	ldr	r5, [pc, #52]	@ (8004080 <__libc_init_array+0x38>)
 800404c:	4c0d      	ldr	r4, [pc, #52]	@ (8004084 <__libc_init_array+0x3c>)
 800404e:	1b64      	subs	r4, r4, r5
 8004050:	10a4      	asrs	r4, r4, #2
 8004052:	2600      	movs	r6, #0
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	4d0b      	ldr	r5, [pc, #44]	@ (8004088 <__libc_init_array+0x40>)
 800405a:	4c0c      	ldr	r4, [pc, #48]	@ (800408c <__libc_init_array+0x44>)
 800405c:	f000 f820 	bl	80040a0 <_init>
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	2600      	movs	r6, #0
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	08004164 	.word	0x08004164
 8004084:	08004164 	.word	0x08004164
 8004088:	08004164 	.word	0x08004164
 800408c:	08004168 	.word	0x08004168

08004090 <strcpy>:
 8004090:	4603      	mov	r3, r0
 8004092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004096:	f803 2b01 	strb.w	r2, [r3], #1
 800409a:	2a00      	cmp	r2, #0
 800409c:	d1f9      	bne.n	8004092 <strcpy+0x2>
 800409e:	4770      	bx	lr

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
